from math import trunc
import re
import discord
import random
from discord import message
from discord.ext import commands
import json
import os

#from requests.api import delete

delmessages = []
Sconfmessages = []
Bconfmessages = []

#Name, Sellprice, catchchance

catchablefish = [
 ["Trout", 25, 30],
 ["Cod", 30, 30],
 ["Bass", 45, 15],
 ["Crab", 75, 12],
 ["Pufferfish", 95, 7],
 ["trpoical fis"],
 ["breefcase"],
 ["Diamond"],
 ["Soggy Bunger", 1, 2]
 ]

#check if number command
def program():
    Trout = 0
    Cod = 0
    Bass = 0
    Crab = 0

  
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        pass
 
    try:
        import unicodedata
        unicodedata.numeric(s)
        return True
    except (TypeError, ValueError):
        pass




#Name, Description, sellable, Sellprice, Useable
fishitems = [
 [":fish: Trout", "A basic trout", True, 75, False],
 [":fish: Cod", "A Basic Cod", True, 70, False],
 [":fish: Bass", "Some sort of bass", True, 85, False],
 [":crab: Crab", "How did you catch a crab", True, 110, False],
 [":blowfish: Pufferfish", "P O F F E R", True, 210, False],
 [":tropical_fish: Tropical Fish", "A cool looking fish... Must be rare, I'd keep it personally", True, 400, False],
 [":briefcase: Bag Of Cash", "still in pretty good condition", True, 700, False],
 [":gem: Comically Sized Diamond", "wow this thing is big", True, 750, False],
 [":hamburger: Soggy Bunger", "Its all soggy :c", True, 1, False]
]
rand = random.choices(fishitems, weights=(30,30,15,10,8,1,6,4,6))

#os.chdir("C:\\Users\\Luke\\Desktop\\Python VScode")
#os.chdir("C:\\Users\\divya\\Documents\\Desktop\\Python\\discord bot")
os.chdir("C:\\Users\\Luke\\Desktop\\Python VScode")


Bot_Name = "Bunger Bot"

async def getprefix(client,message):
    await check_prefix(message.guild,message)
    with open("Data.json", "r",) as f:
        guilds = json.load(f)
    return guilds[str(message.guild.id)]["Prefix"]

print(getprefix)

Bot = commands.Bot(case_insensitive=True, command_prefix=getprefix)
Bot.remove_command("help")

@Bot.group(invoke_without_command=True)
async def help(ctx):
    
    em=discord.Embed(title=" ", description=" ", color=0x804040)
    em.set_author(name="Bunger Bot Help:")
    
    em.add_field(name="Work", value="Go to work and flip some Bungers! ", inline=False)
    em.add_field(name="Fish", value="Go fishing and randomly fish up one of the many fish in the sea or lake or whatever idk im not a fish", inline=False)
    em.add_field(name="Deposit", value="Deposit money from your wallet into your bank account to keep it nice and safe | (alias: dep)", inline=False)
    em.add_field(name="Withdraw", value="Take money from your bank to put it in your wallet | (aliases: with, wit)", inline=False)
    em.add_field(name="Balance", value="Check your bank & wallet balance | (alias: bal)", inline=False)
    em.add_field(name="Sell {item}", value="Sells the item you want to sell in exchange for Bungers!", inline=False)
    em.add_field(name="Inventory", value="Checks the items in your inventory | (alias: Inventory)", inline=False)

    em.add_field(name="Purge", value="Purge {num} - Delete a set amount of messages in the channel the ", inline=False)

    em.add_field(name="NewPrefix", value="Newprefix {newprefix} - Changes the default ", inline=False)
    em.add_field(name="Ping", value="ping - Checks your ping", inline=False)
    
    await ctx.send(embed=em)

print("SPACER -----------------------------------------------------")

# Prefix saving
@Bot.command()
async def prefixcheck(ctx):
    message = ctx.message
    await check_prefix(message.guild, message)

    guilds = await get_guilds()

    guild = message.guild

    prefix = guilds[str(guild.id)]["Prefix"]


async def check_prefix(guild, message):
    # guilds = get_prefix_data() #<coroutine object get_prefix_data at 0x0000028A86789A40>
    guilds = await get_guilds()

    if str(guild.id) in guilds:
        prefix = guilds[str(guild.id)]["Prefix"]

    else:
        guilds[str(guild.id)] = {}
        guilds[str(guild.id)]["Prefix"] = "B#" 

    with open("Data.json", "w",) as f:
        json.dump(guilds, f)


async def get_guilds():
    with open("Data.json", "r",) as f:
        guilds = json.load(f)
    return guilds


# Bot Print Ready
@Bot.event
async def on_ready():
    print("Bot Be The Do Ready")


# Secret amogus command
@Bot.command()
async def amogus(ctx):
    await ctx.send("Red sus.😳 Red suuuus.😳 I said red, sus, hahahahaha.😳 Why arent you laughing?😳 I just made a reference to the popular video game 'Among Us'! 😳How can you not laugh at it? 😳Emergeny meeting!😳 Guys, this here guy doesnt laugh at my funny Among Us memes! 😳Lets beat him to death! Dead body reported! Skip! Skip! Vote blue!😳 Blue was not an impostor😳. Among us in a nutshell hahahaha. 😳What?! Youre still not laughing your ass off? I made SEVERAL funny references to Among Us and YOU STILL ARENT LAUGHING??!!! Bruh. Ya hear that? Wooooooosh. Whats woooosh? Oh, nothing. Just the sound of a joke flying over your head. Whats that? You think im annoying? Kinda sus, bro. Hahahaha! Anyway, yea, gotta go do tasks. Hahahaha! funny amogus ahha")
    # ChangePrefix

# Ping command
@Bot.command()
async def ping(ctx):
    await ctx.send(f'Current ping: {round(Bot.latency * 1000)}ms')


# GetUser test command
@Bot.command()
async def getuser(ctx):
    await ctx.send(f'User is {ctx.author}')


# Purge Command
@Bot.command()
async def purge(ctx, amount=0):
    if amount == None or amount == 0:  # and :
        await ctx.send("Amount not recognized, please put a valid number.")
    elif amount != None and amount != 0:
        amount = amount + 1
        await ctx.channel.purge(limit=amount)

# Change Prefix command
@Bot.command(aliases=['newprefix', 'setprefix'])
async def changeprefix(ctx, *, usersPrefix):
    print(ctx, "IS THE CTX")
    Bot.command_prefix = usersPrefix

    with open("Data.json", "r",) as f:
        guilds = json.load(f)

    guild = ctx.guild

    guilds[str(guild.id)]["Prefix"] = str(usersPrefix)

    with open("Data.json", "w",) as f:
        json.dump(guilds, f)

    prefixjson = guilds[str(guild.id)]['Prefix']
    await ctx.send(f'Prefix successfully changed \nNew prefix is "{prefixjson}"')

@Bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f'{ctx.author.mention}, This command is on cooldown, you can use it in: `{round(error.retry_after, 2)}` Seconds')

# Work Command
@Bot.command()
@commands.cooldown(1, 25, commands.BucketType.user)
async def work(ctx):
    await makeacc(ctx)
    users = await getusers()

    if str(ctx.author.id) in users:
     winamnt = random.randint(50,185)
     users[str(ctx.author.id)]["wallet"] += winamnt

     with open("Data.json", "w") as f:
          json.dump(users, f)

     users = await getusers() 

     new_wallet = users[str(ctx.author.id)]["wallet"] 
     new_bank = users[str(ctx.author.id)]["bank"] 
     winembed = discord.Embed(title=f"{ctx.author.display_name}'s Winnings", color=discord.Color.blurple())
     winembed.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)
     winembed.add_field(name="Bungers Made", value=f":hamburger:{str(winamnt*1.5)} Bungers Were flipped, and :hamburger:***{winamnt}*** Bungers were kept!", inline=False)
     winembed.add_field(name="Total Bungers", value=f":hamburger:{new_wallet} in wallet\n:hamburger:{new_bank} In bank", inline=False)
     
     await ctx.send(embed=winembed)

#deposit comand
@Bot.command(aliases=['deposit', 'depo'])
@commands.cooldown(1, 3, commands.BucketType.user)
async def dep(ctx, num):
    
    await makeacc(ctx)
    users = await getusers()

    if num == "all":
        num = inwallet = users[str(ctx.author.id)]["wallet"]
        num = round(num)
    if num == "half":
        num = inwallet = users[str(ctx.author.id)]["wallet"] / 2 
        num = round(num)

    inwallet = users[str(ctx.author.id)]["wallet"]
    inbank = users[str(ctx.author.id)]["bank"]

    if num != 0 and inwallet >= float(num):
       users[str(ctx.author.id)]["wallet"] -= float(num)
       users[str(ctx.author.id)]["bank"] += float(num)
       with open("Data.json", "w") as f:
          json.dump(users, f)

       users = await getusers()
       inwallet = users[str(ctx.author.id)]["wallet"]
       inbank = users[str(ctx.author.id)]["bank"]

       winembed = discord.Embed(title=f"{ctx.author.display_name}'s Balance", color=discord.Color.blurple(), description = f"Succesfully deposited :hamburger:{num} into the bank!")
       winembed.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)
       winembed.add_field(name="In Wallet", value=f":hamburger:{inwallet}", inline=False)
       winembed.add_field(name="In Bank", value=f":hamburger:{inbank}", inline=False)

       await ctx.send(embed=winembed)
    else:
        await ctx.send("You do not have enough money to do that")

#withdraw comand
@Bot.command(aliases=['wit', 'with'])
@commands.cooldown(1, 3, commands.BucketType.user)
async def withdraw(ctx, num):
    await makeacc(ctx)
    users = await getusers()

    if num == "all":
        num = inbank = users[str(ctx.author.id)]["bank"]
        num = round(num)
    if num == "half":
        num = inbank = users[str(ctx.author.id)]["bank"] / 2 
        num = round(num)

    inwallet = users[str(ctx.author.id)]["wallet"]
    inbank = users[str(ctx.author.id)]["bank"]

    if num != 0 and inbank >= float(num):
       users[str(ctx.author.id)]["wallet"] += float(num)
       users[str(ctx.author.id)]["bank"] -= float(num)
       with open("Data.json", "w") as f:
          json.dump(users, f)

       users = await getusers()
       inwallet = users[str(ctx.author.id)]["wallet"]
       inbank = users[str(ctx.author.id)]["bank"]

       winembed = discord.Embed(title=f"{ctx.author.display_name}'s Balance", color=discord.Color.blurple(), description = f"Succesfully withdrew :hamburger:{num}!")
       winembed.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)
       winembed.add_field(name="In Wallet", value=f":hamburger:{inwallet}", inline=False)
       winembed.add_field(name="In Bank", value=f":hamburger:{inbank}", inline=False)

       await ctx.send(embed=winembed)
    else:
        await ctx.send("You do not have enough money to do that")

#checkbal command
@Bot.command()
@commands.cooldown(1, 3, commands.BucketType.user)
async def bal(ctx):
    await makeacc(ctx)

    users = await getusers()

    inwallet = users[str(ctx.author.id)]["wallet"]
    inbank = users[str(ctx.author.id)]["bank"]

    winembed = discord.Embed(title=f"{ctx.author.display_name}'s Balance", color=discord.Color.blurple())
    winembed.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)
    winembed.add_field(name="In Wallet", value=f":hamburger:{inwallet}", inline=False)
    winembed.add_field(name="In Bank", value=f":hamburger:{inbank}", inline=False)

    await ctx.send(embed=winembed)

#fish command
@Bot.command()
@commands.cooldown(1, 30, commands.BucketType.user)
async def fish(ctx):
    await makeinv(ctx)

    inven = await getinven()
    inv = inven[str(ctx.author.id)]["Inv"]
    randnum = random.choices(fishitems, weights=(30,30,15,10,8,1,6,4,6))
    inv.append(randnum[0])
    await ctx.send(f"{ctx.author.mention}, You feel a bite... You Reel in... \nYou caught a **{randnum[0][0]}**!")
    with open("InvData.json", "w") as f:
             json.dump(inven, f)
 
#checkinv command
@Bot.command(aliases=["inventory"])
@commands.cooldown(1, 3, commands.BucketType.user)
async def inv(ctx):
    
    await makeinv(ctx)
    emb = discord.Embed(title=f"{ctx.author.display_name}'s Inventory", color=discord.Color.blurple())
    emb.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)

    inven = await getinven()
    inv = inven[str(ctx.author.id)]["Inv"]
    num = 0

    for x in inven[str(ctx.author.id)]["Inv"]:
        emb.add_field(name=f"[{num + 1}] {x[0]}", value=f"{inv[num][1]}", inline=False)
        num = num + 1

    await ctx.send(embed=emb)

#make inventory thing
async def makeinv(ctx):
    inven = await getinven()

    if str(ctx.author.id) in inven:
        pass

    else:
          inven[str(ctx.author.id)] = {}
          inven[str(ctx.author.id)]["Inv"] = [] 
          with open("InvData.json", "w") as f:
             json.dump(inven, f)

#sell command
@Bot.command()
@commands.cooldown(1, 3, commands.BucketType.user)
async def sell(ctx, *, item):
    await makeinv(ctx)
    await makeacc(ctx)
    inven = await getinven()

    FoundItem = False
    FoundNum = None
    Sellingitem = None
    Num = 0

    isnum = is_number(item)

    if isnum == True:
        item = round(float(item))
        print("wasNum")
        print(isnum, item)

    for x in inven[str(ctx.author.id)]["Inv"]:
        print(isnum)
        if isnum == None and x[0].lower().find(item.lower()) != -1 and x[2] == True:
            FoundItem = True
            FoundNum = Num
            Sellingitem = inven[str(ctx.author.id)]["Inv"][FoundNum]
            break
        elif isnum == True and inven[str(ctx.author.id)]["Inv"][round(item - 1)] != None and inven[str(ctx.author.id)]["Inv"][round(item - 1)][2] == True:
            print("yeah yeah")
            FoundItem = True
            FoundNum = item - 1
            Sellingitem = inven[str(ctx.author.id)]["Inv"][round(item - 1)]
            break

        Num = Num + 1

    if FoundItem == False:
        msg = await ctx.send(f"{ctx.author.mention}, Item either `not found`, or `unsellable`")
        await msg.add_reaction("❌")
        msgreaction = "❌"
        sender = ctx.author
        delmessages.append([msg, msgreaction, sender])

    else: 
        if inven[str(ctx.author.id)]["Inv"][FoundNum][2] != None:
            

            

            users = await getusers()
            name = inven[str(ctx.author.id)]["Inv"][FoundNum][0]
            price = inven[str(ctx.author.id)]["Inv"][FoundNum][3]

            

            newbal = users[str(ctx.author.id)]["wallet"]
            msg = await ctx.send(f'{ctx.author.mention}, Are you sure you want to sell "{name}" for :hamburger:{price} Bungers?')
            #msg = await ctx.send(f"Succesfully sold {name} for :hamburger:{price} Bungers!\nNew Wallet Balance: :Hamburger:***{newbal}*** Bungers")
            await msg.add_reaction("✔️")
            await msg.add_reaction("❌")

            decreact = "❌"
            confreact = "✔️"
            sender = ctx.author
            Sconfmessages.append([msg, confreact, decreact , sender, name, price, FoundNum, Sellingitem])
        else:
            await ctx.send("Item not sellable")

#Reactions Handler       
@Bot.event
async def on_reaction_add(reaction, user):
    num = 0
    for x in delmessages:
        if x[0] == reaction.message and x[2] == user and str(reaction) == x[1]:
            delmessages.remove(delmessages[num])
            await reaction.message.delete()
            break
        num = num + 1

    num = 0
    for x in Sconfmessages:
        inven = await getinven()
        if x[3] == user and x[7] in inven[str(user.id)]["Inv"]:
          sellthing = inven[str(user.id)]["Inv"][x[6]]
          if x[0] == reaction.message and str(reaction) == x[1] and inven[str(user.id)]["Inv"][x[6]] != None and sellthing[0] == x[4]:
             users = await getusers()
             inven = await getinven()

             users[str(user.id)]["wallet"] += inven[str(user.id)]["Inv"][x[6]][3]
             with open("Data.json", "w") as f:
                 json.dump(users, f)
            
             Inv = inven[str(user.id)]["Inv"]
             Inv.remove(inven[str(user.id)]["Inv"][x[6]])
             with open("InvData.json", "w") as f:
                  json.dump(inven, f)
            
             users = await getusers()
             bal = users[str(user.id)]["wallet"]
             await reaction.message.edit(content=f'{user.mention}\nSuccesfully sold "{x[4]}" for :hamburger:{x[5]} Bungers!\nNew Wallet Balance: :hamburger:{bal} Bungers!')
             Sconfmessages.remove(Sconfmessages[num])
            

          elif x[0] == reaction.message and x[3] == user and str(reaction) == x[2]:
             Sconfmessages.remove(Sconfmessages[num])
             await reaction.message.edit(content="Sell Action Canceled")
        
    for x in Bconfmessages:
        shops = await getshops()
        guild = x[8]

        if x[3] == user and x[9] in shops[str(guild.id)]:
          Buything = x[7]

          users = await getusers()
          if x[0] == reaction.message and str(reaction) == x[1] and Buything != None and Buything[0] == x[4] and users[str(user.id)]["wallet"] >= x[5]:
             users = await getusers()

             users[str(user.id)]["wallet"] -= Buything[3]
             with open("Data.json", "w") as f:
                 json.dump(users, f)
            
             inven = await getinven()

             Inv = inven[str(user.id)]["Inv"]
             Inv.append(Buything)
             with open("InvData.json", "w") as f:
                  json.dump(inven, f)
            
             users = await getusers()
             bal = users[str(user.id)]["wallet"]
             await reaction.message.edit(content=f'{user.mention}\nSuccesfully bought "{x[4]}" for :hamburger:{x[5]} Bungers!\nNew Wallet Balance: :hamburger:{bal} Bungers!')
             Bconfmessages.remove(Bconfmessages[num])
            
          elif users[str(user.id)]["wallet"] < x[5]:
              await reaction.message.edit(content=f"{user.mention}, Not enough :hamburger:`Bungers` to purchase this item\nhaha broke lol")

          elif x[0] == reaction.message and x[3] == user and str(reaction) == x[2]:
             Bconfmessages.remove(Bconfmessages[num])
             await reaction.message.edit(content="Sell Action Canceled")

    num = num + 1

#Check Shop command
@Bot.command()
async def shop(ctx):
    await makeshop(ctx)

    emb = discord.Embed(title=f"Shop", color=discord.Color.blurple())
   # emb.set_author(name="Bunger Bot", icon_url = ctx.author.avatar_url)

    shops = await getshops()

    num = 0
    for x in shops[str(ctx.guild.id)]:
        emb.add_field(name=f"[{num + 1}] {shops[str(ctx.guild.id)][x][0]}", value = shops[str(ctx.guild.id)][x][1], inline=False)
        num =+ 1

    await ctx.send(embed=emb)
        
#Buy Command
@Bot.command()
@commands.cooldown(1, 3, commands.BucketType.user)
async def Buy(ctx, *, item):

    await makeshop(ctx)
    await makeinv(ctx)
    await makeacc(ctx)
    shops = await getshops()

    FoundItem = False
    BuyingItem = None
    Num = 0

    isnum = is_number(item)

    if isnum == True:
        item = round(float(item))

    for x in shops[str(ctx.guild.id)]:
        print(shops[str(ctx.guild.id)][x])
        if isnum == None and shops[str(ctx.guild.id)][x][0].lower().find(item.lower()) != -1:
            FoundItem = True
            FoundNum = Num
            BuyingItem = shops[str(ctx.guild.id)][x]
            break
        elif isnum == True and shops[str(ctx.guild.id)][x][round(item - 1)] != None:
            print("yeah yeah")
            FoundItem = True
            FoundNum = item - 1
            BuyingItem = shops[str(ctx.guild.id)][x]
            break

        Num = Num + 1

    if FoundItem == False:
        msg = await ctx.send("Item not found")
        await msg.add_reaction("❌")
        msgreaction = "❌"
        sender = ctx.author
        delmessages.append([msg, msgreaction, sender])

    else: 
        if shops[str(ctx.guild.id)][x][2] != None:
            


            users = await getusers()
            name = shops[str(ctx.guild.id)][x][0]
            price = shops[str(ctx.guild.id)][x][5]

            

            newbal = users[str(ctx.author.id)]["wallet"]
            msg = await ctx.send(f'{ctx.author.mention}, Are you sure you want to buy "{name}" for :hamburger:{price} Bungers?')
            #msg = await ctx.send(f"Succesfully sold {name} for :hamburger:{price} Bungers!\nNew Wallet Balance: :Hamburger:***{newbal}*** Bungers")
            await msg.add_reaction("✔️")
            await msg.add_reaction("❌")

            decreact = "❌"
            confreact = "✔️"
            sender = ctx.author
            guild = ctx.guild
            othername = str(x)
            Bconfmessages.append([msg, confreact, decreact , sender, name, price, FoundNum, BuyingItem, guild, othername])
        else:
            await ctx.send("Item not sellable")

#Itemsetup Command
@Bot.command()
async def ItemSetup(ctx):
    await ctx.send('To set up an item, type in `"B#Additem {Name}, {Description}, idk"` (If they are more than 1 words long use quotes, ***EX***: **Quotes arent needed for FishingRod, but they are for "Fishing Rod"**)')



#Makes bank account
async def makeacc(ctx):
    users = await getusers()

    if str(ctx.author.id) in users:
        return False

    else:
        users[str(ctx.author.id)] = {}
        users[str(ctx.author.id)]["wallet"] = 0
        users[str(ctx.author.id)]["bank"] = 0
        with open("Data.json", "w") as f:
            json.dump(users, f)
        return True

#Gets users
async def getusers():
    with open("Data.json", "r") as f:
            users = json.load(f)
    return users

#Gets Inven
async  def getinven():
    with open("InvData.json", "r") as f:
        inven = json.load(f)
    return inven

#Gets Shop
async  def getshops():
    with open("Shopdata.json", "r") as f:
        shops = json.load(f)
    return shops

#Makes shop
async def makeshop(ctx):
    shops = await getshops()

    if str(ctx.guild.id) in shops:
        return False

    else:
        shops[str(ctx.guild.id)] = {}
        shops[str(ctx.guild.id)]["Fishing Rod"] = ["Fishing Rod", ":fishing_pole_and_fish: Used to fish! Grants access to the 'B#fish' command!", False, 0, False]
        #items = shops[str(ctx.guild.id)]["Items"]
        #items.append(["Fishing Rod", "Used to fish! Grants access to the 'B#fish' command!", False, 0, False])

        with open("Shopdata.json", "w") as f:
            json.dump(shops, f)

# KEEP THIS SECRET (hes joking tell it to everyone)
Bot.run('TOKEN')
