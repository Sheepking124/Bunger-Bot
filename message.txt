from math import trunc
import re
import discord
import random
from discord import message
from discord.ext import commands
import json
import os

#from requests.api import delete

delmessages = []
confmessages = []

#Name, Sellprice, catchchance
catchablefish = [
 ["Trout", 25, 40],
 ["Cod", 30, 30],
 ["Bass", 35, 20],
 ["Crab", 75, 10]
 ]

#Name, Description, sellable, Sellprice, UseAble
fishitems = [
 ["Trout", ":fish: A basic trout", True, 40, False],
 ["Cod", ":fish: A Basic Cod", True, 30, False],
 ["Bass", ":fish: Some sort of bass", True, 35, False],
 ["Crab", ":crab: How did you catch a crab", True, 75, False]
]

print(catchablefish[1][1])

#os.chdir("C:\\Users\\Luke\\Desktop\\Python VScode")
#os.chdir("C:\\Users\\divya\\Documents\\Desktop\\Python\\discord bot")
os.chdir("C:\\Users\\Luke\\Desktop\\Python VScode")


Bot_Name = "Bunger Bot"

async def getprefix(client,message):
    await check_prefix(message.guild,message)
    with open("Data.json", "r",) as f:
        guilds = json.load(f)
    return guilds[str(message.guild.id)]["Prefix"]

print(getprefix)

Bot = commands.Bot(command_prefix= getprefix)

print("SPACER -----------------------------------------------------")


# Prefix saving?
@Bot.command()
async def prefixcheck(ctx):
    message = ctx.message
    await check_prefix(message.guild, message)

    guilds = await get_guilds()

    guild = message.guild

    prefix = guilds[str(guild.id)]["Prefix"]


async def check_prefix(guild, message):
    # guilds = get_prefix_data() #<coroutine object get_prefix_data at 0x0000028A86789A40>
    guilds = await get_guilds()

    if str(guild.id) in guilds:
        prefix = guilds[str(guild.id)]["Prefix"]

    else:
        guilds[str(guild.id)] = {}
        guilds[str(guild.id)]["Prefix"] = "B#" 

    with open("Data.json", "w",) as f:
        json.dump(guilds, f)


async def get_guilds():
    with open("Data.json", "r",) as f:
        guilds = json.load(f)
    return guilds


# Bot Print Ready
@Bot.event
async def on_ready():
    print("Bot Be The Do Ready")


# Secret amogus command
@Bot.command()
async def amogus(ctx):
    await ctx.send("Red sus.😳 Red suuuus.😳 I said red, sus, hahahahaha.😳 Why arent you laughing?😳 I just made a reference to the popular video game 'Among Us'! 😳How can you not laugh at it? 😳Emergeny meeting!😳 Guys, this here guy doesnt laugh at my funny Among Us memes! 😳Lets beat him to death! Dead body reported! Skip! Skip! Vote blue!😳 Blue was not an impostor😳. Among us in a nutshell hahahaha. 😳What?! Youre still not laughing your ass off? I made SEVERAL funny references to Among Us and YOU STILL ARENT LAUGHING??!!! Bruh. Ya hear that? Wooooooosh. Whats woooosh? Oh, nothing. Just the sound of a joke flying over your head. Whats that? You think im annoying? Kinda sus, bro. Hahahaha! Anyway, yea, gotta go do tasks. Hahahaha! funny amogus ahha")
    # ChangePrefix


# @Bot.command()
# async def testrefresh(ctx):
#    await ctx.send("new code works")


# Ping command
@Bot.command()
async def ping(ctx):
    await ctx.send(f'Current ping: {round(Bot.latency * 1000)}ms')


# GetUser test command
@Bot.command()
async def getuser(ctx):
    await ctx.send(f'User is {ctx.author}')


# Purge Command
@Bot.command()
async def purge(ctx, amount=0):
    if amount == None or amount == 0:  # and :
        await ctx.send("Amount not recognized, please put a valid number.")
    elif amount != None and amount != 0:
        amount = amount + 1
        await ctx.channel.purge(limit=amount)

# Change Prefix command


@Bot.command(aliases=['newprefix', 'setprefix'])
async def changeprefix(ctx, *, usersPrefix):
    print(ctx, "IS THE CTX")
    Bot.command_prefix = usersPrefix
    # spacer
    with open("Data.json", "r",) as f:
        guilds = json.load(f)
    # spacer
    guild = ctx.guild

    await ctx.send(f"{guild} is the 'guild' value")
    await ctx.send(f"{guilds} is the 'guilds' value")
    await ctx.send(f"{usersPrefix} is the 'usersPrefix' value")
    prefixjson = guilds[str(guild.id)]["Prefix"]
    await ctx.send(f"{prefixjson} is the prefix stored in the json file")

    
    guilds[str(guild.id)]["Prefix"] = str(usersPrefix)

    with open("Data.json", "w",) as f:
        json.dump(guilds, f)

    prefixjson = guilds[str(guild.id)]['Prefix']
    await ctx.send(f'Prefix successfully changed \nNew prefix is "{prefixjson}"')


# Work Command
@Bot.command()
async def work(ctx):
    await makeacc(ctx)
    users = await getusers()

    if str(ctx.author.id) in users:
     winamnt = random.randint(50,185)
     users[str(ctx.author.id)]["wallet"] += winamnt

     with open("Data.json", "w") as f:
          json.dump(users, f)

     users = await getusers() 

     new_wallet = users[str(ctx.author.id)]["wallet"] 
     new_bank = users[str(ctx.author.id)]["bank"] 
     winembed = discord.Embed(title=f"{ctx.author.display_name}'s Winnings", color=discord.Color.blurple())
     winembed.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)
     winembed.add_field(name="Bungers Made", value=f":hamburger:{str(winamnt*1.5)} Bungers Were flipped, and :hamburger:***{winamnt}*** Bungers were kept!", inline=False)
     winembed.add_field(name="Total Bungers", value=f":hamburger:{new_wallet} in wallet\n:hamburger:{new_bank} In bank", inline=False)
     
     await ctx.send(embed=winembed)

#deposit comand
@Bot.command(aliases=['deposit', 'depo'])
async def dep(ctx, num):
    
    await makeacc(ctx)
    users = await getusers()

    if num == "all":
        num = inwallet = users[str(ctx.author.id)]["wallet"]
    if num == "half":
        num = inwallet = users[str(ctx.author.id)]["wallet"] / 2 
    num = round(num)

    inwallet = users[str(ctx.author.id)]["wallet"]
    inbank = users[str(ctx.author.id)]["bank"]

    if num != 0 and inwallet >= float(num):
       users[str(ctx.author.id)]["wallet"] -= float(num)
       users[str(ctx.author.id)]["bank"] += float(num)
       with open("Data.json", "w") as f:
          json.dump(users, f)

       users = await getusers()
       inwallet = users[str(ctx.author.id)]["wallet"]
       inbank = users[str(ctx.author.id)]["bank"]

       winembed = discord.Embed(title=f"{ctx.author.display_name}'s Balance", color=discord.Color.blurple(), description = f"Succesfully deposited :hamburger:{num} into the bank!")
       winembed.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)
       winembed.add_field(name="In Wallet", value=f":hamburger:{inwallet}", inline=False)
       winembed.add_field(name="In Bank", value=f":hamburger:{inbank}", inline=False)

       await ctx.send(embed=winembed)
    else:
        await ctx.send("You do not have enough money to do that")

#withdraw comand
@Bot.command(aliases=['wit', 'with'])
async def withdraw(ctx, num):
    await makeacc(ctx)
    users = await getusers()

    if num == "all":
        num = inbank = users[str(ctx.author.id)]["bank"]
    if num == "half":
        num = inbank = users[str(ctx.author.id)]["bank"] / 2 
    num = round(num)

    inwallet = users[str(ctx.author.id)]["wallet"]
    inbank = users[str(ctx.author.id)]["bank"]

    if num != 0 and inbank >= float(num):
       users[str(ctx.author.id)]["wallet"] += float(num)
       users[str(ctx.author.id)]["bank"] -= float(num)
       with open("Data.json", "w") as f:
          json.dump(users, f)

       users = await getusers()
       inwallet = users[str(ctx.author.id)]["wallet"]
       inbank = users[str(ctx.author.id)]["bank"]

       winembed = discord.Embed(title=f"{ctx.author.display_name}'s Balance", color=discord.Color.blurple(), description = f"Succesfully withdrew :hamburger:{num}!")
       winembed.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)
       winembed.add_field(name="In Wallet", value=f":hamburger:{inwallet}", inline=False)
       winembed.add_field(name="In Bank", value=f":hamburger:{inbank}", inline=False)

       await ctx.send(embed=winembed)
    else:
        await ctx.send("You do not have enough money to do that")

#checkbal command
@Bot.command()
async def bal(ctx):
    await makeacc(ctx)

    users = await getusers()

    inwallet = users[str(ctx.author.id)]["wallet"]
    inbank = users[str(ctx.author.id)]["bank"]

    winembed = discord.Embed(title=f"{ctx.author.display_name}'s Balance", color=discord.Color.blurple())
    winembed.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)
    winembed.add_field(name="In Wallet", value=f":hamburger:{inwallet}", inline=False)
    winembed.add_field(name="In Bank", value=f":hamburger:{inbank}", inline=False)

    await ctx.send(embed=winembed)

#fish command
@Bot.command()
async def fish(ctx):
    await makeinv(ctx)

    inven = await getinven()
    inv = inven[str(ctx.author.id)]["Inv"]
    randnum = random.randint(0,3)
    inv.append(fishitems[randnum])
    await ctx.send(f"{ctx.author.mention}, You feel a bite... You Reel in... \nYou caught a **{fishitems[randnum][0]}**!")
    with open("InvData.json", "w") as f:
             json.dump(inven, f)


    
    
#checkinv command
@Bot.command(aliases=["inventory"])
async def inv(ctx):
    
    await makeinv(ctx)
    emb = discord.Embed(title=f"{ctx.author.display_name}'s Inventory", color=discord.Color.blurple())
    emb.set_author(name=ctx.author.display_name, icon_url = ctx.author.avatar_url)

    inven = await getinven()
    inv = inven[str(ctx.author.id)]["Inv"]
    num = 0

    for x in inven[str(ctx.author.id)]["Inv"]:
        emb.add_field(name=x[0], value=f"{inv[num][1]}", inline=False)
        num = num + 1

    await ctx.send(embed=emb)

async def makeinv(ctx):
    inven = await getinven()

    if str(ctx.author.id) in inven:
        pass

    else:
          inven[str(ctx.author.id)] = {}
          inven[str(ctx.author.id)]["Inv"] = [] 
          with open("InvData.json", "w") as f:
             json.dump(inven, f)

#sell command
@Bot.command()
async def sell(ctx, *, item):
    await makeinv(ctx)
    await makeacc(ctx)
    inven = await getinven()

    FoundItem = False
    FoundNum = None
    Num = 0

    for x in inven[str(ctx.author.id)]["Inv"]:
        if x[0] == item:
            FoundItem = True
            FoundNum = Num
            break
        Num = Num + 1

    if FoundItem == False:
        msg = await ctx.send("Item not found")
        await msg.add_reaction("❌")
        msgreaction = "❌"
        sender = ctx.author
        delmessages.append([msg, msgreaction, sender])

    else: 
        if inven[str(ctx.author.id)]["Inv"][FoundNum][2] != None:
            

            

            users = await getusers()
            name = inven[str(ctx.author.id)]["Inv"][FoundNum][0]
            price = inven[str(ctx.author.id)]["Inv"][FoundNum][3]

            

            newbal = users[str(ctx.author.id)]["wallet"]
            msg = await ctx.send(f'{ctx.author.mention}, Are you sure you want to sell "{name}" for :hamburger:{price} Bungers?')
            #msg = await ctx.send(f"Succesfully sold {name} for :hamburger:{price} Bungers!\nNew Wallet Balance: :Hamburger:***{newbal}*** Bungers")
            await msg.add_reaction("✔️")
            await msg.add_reaction("❌")

            decreact = "❌"
            confreact = "✔️"
            sender = ctx.author
            confmessages.append([msg, confreact, decreact , sender, name, price, FoundNum])
        else:
            await ctx.send("Item not sellable")
            
@Bot.event
async def on_reaction_add(reaction, user):
    num = 0
    for x in delmessages:
        if x[0] == reaction.message and x[2] == user and str(reaction) == x[1]:
            delmessages.remove(delmessages[num])
            await reaction.message.delete()
            break
        num = num + 1

    num = 0
    for x in confmessages:
        if x[0] == reaction.message and x[3] == user and str(reaction) == x[1]:
            users = await getusers()
            inven = await getinven()

            users[str(user.id)]["wallet"] += inven[str(user.id)]["Inv"][x[6]][3]
            with open("Data.json", "w") as f:
                json.dump(users, f)
            
            Inv = inven[str(user.id)]["Inv"]
            Inv.remove(inven[str(user.id)]["Inv"][x[6]])
            with open("InvData.json", "w") as f:
             json.dump(inven, f)
            
            users = await getusers()
            bal = users[str(user.id)]["wallet"]
            await reaction.message.edit(content=f'{user.mention}\nSuccesfully sold "{x[4]}" for :hamburger:{x[5]} Bungers!\nNew Wallet Balance: :hamburger:{bal} Bungers!')
            confmessages.remove(confmessages[num])

        elif x[0] == reaction.message and x[3] == user and str(reaction) == x[2]:
            confmessages.remove(confmessages[num])
            await reaction.message.edit(content="Sell Action Canceled")
    num = num + 1
        
#Makes bank account
async def makeacc(ctx):
    users = await getusers()

    if str(ctx.author.id) in users:
        return False

    else:
        users[str(ctx.author.id)] = {}
        users[str(ctx.author.id)]["wallet"] = 0
        users[str(ctx.author.id)]["bank"] = 0
        with open("Data.json", "w") as f:
            json.dump(users, f)
        return True

#Gets users
async def getusers():
    with open("Data.json", "r") as f:
            users = json.load(f)
    return users

#Gets Inven
async  def getinven():
    with open("InvData.json", "r") as f:
        inven = json.load(f)
    return inven



# KEEP THIS SECRET (hes joking tell it to everyone)
Bot.run('')
